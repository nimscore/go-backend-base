// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: moderation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModerationService_BanUser_FullMethodName               = "/proto.ModerationService/BanUser"
	ModerationService_UnbanUser_FullMethodName             = "/proto.ModerationService/UnbanUser"
	ModerationService_BanUserInCommunity_FullMethodName    = "/proto.ModerationService/BanUserInCommunity"
	ModerationService_UnbanUserInCommunity_FullMethodName  = "/proto.ModerationService/UnbanUserInCommunity"
	ModerationService_MuteUserInCommunity_FullMethodName   = "/proto.ModerationService/MuteUserInCommunity"
	ModerationService_UnmuteUserInCommunity_FullMethodName = "/proto.ModerationService/UnmuteUserInCommunity"
	ModerationService_ListModerationLogs_FullMethodName    = "/proto.ModerationService/ListModerationLogs"
)

// ModerationServiceClient is the client API for ModerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModerationServiceClient interface {
	// Platform-wide Moderation
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserResponse, error)
	// Community-specific Moderation
	BanUserInCommunity(ctx context.Context, in *BanUserInCommunityRequest, opts ...grpc.CallOption) (*BanUserInCommunityResponse, error)
	UnbanUserInCommunity(ctx context.Context, in *UnbanUserInCommunityRequest, opts ...grpc.CallOption) (*UnbanUserInCommunityResponse, error)
	MuteUserInCommunity(ctx context.Context, in *MuteUserInCommunityRequest, opts ...grpc.CallOption) (*MuteUserInCommunityResponse, error)
	UnmuteUserInCommunity(ctx context.Context, in *UnmuteUserInCommunityRequest, opts ...grpc.CallOption) (*UnmuteUserInCommunityResponse, error)
	// Moderation Logs
	ListModerationLogs(ctx context.Context, in *ListModerationLogsRequest, opts ...grpc.CallOption) (*ListModerationLogsResponse, error)
}

type moderationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModerationServiceClient(cc grpc.ClientConnInterface) ModerationServiceClient {
	return &moderationServiceClient{cc}
}

func (c *moderationServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, ModerationService_BanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbanUserResponse)
	err := c.cc.Invoke(ctx, ModerationService_UnbanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) BanUserInCommunity(ctx context.Context, in *BanUserInCommunityRequest, opts ...grpc.CallOption) (*BanUserInCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanUserInCommunityResponse)
	err := c.cc.Invoke(ctx, ModerationService_BanUserInCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) UnbanUserInCommunity(ctx context.Context, in *UnbanUserInCommunityRequest, opts ...grpc.CallOption) (*UnbanUserInCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbanUserInCommunityResponse)
	err := c.cc.Invoke(ctx, ModerationService_UnbanUserInCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) MuteUserInCommunity(ctx context.Context, in *MuteUserInCommunityRequest, opts ...grpc.CallOption) (*MuteUserInCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteUserInCommunityResponse)
	err := c.cc.Invoke(ctx, ModerationService_MuteUserInCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) UnmuteUserInCommunity(ctx context.Context, in *UnmuteUserInCommunityRequest, opts ...grpc.CallOption) (*UnmuteUserInCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmuteUserInCommunityResponse)
	err := c.cc.Invoke(ctx, ModerationService_UnmuteUserInCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moderationServiceClient) ListModerationLogs(ctx context.Context, in *ListModerationLogsRequest, opts ...grpc.CallOption) (*ListModerationLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModerationLogsResponse)
	err := c.cc.Invoke(ctx, ModerationService_ListModerationLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModerationServiceServer is the server API for ModerationService service.
// All implementations must embed UnimplementedModerationServiceServer
// for forward compatibility.
type ModerationServiceServer interface {
	// Platform-wide Moderation
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserResponse, error)
	// Community-specific Moderation
	BanUserInCommunity(context.Context, *BanUserInCommunityRequest) (*BanUserInCommunityResponse, error)
	UnbanUserInCommunity(context.Context, *UnbanUserInCommunityRequest) (*UnbanUserInCommunityResponse, error)
	MuteUserInCommunity(context.Context, *MuteUserInCommunityRequest) (*MuteUserInCommunityResponse, error)
	UnmuteUserInCommunity(context.Context, *UnmuteUserInCommunityRequest) (*UnmuteUserInCommunityResponse, error)
	// Moderation Logs
	ListModerationLogs(context.Context, *ListModerationLogsRequest) (*ListModerationLogsResponse, error)
	mustEmbedUnimplementedModerationServiceServer()
}

// UnimplementedModerationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModerationServiceServer struct{}

func (UnimplementedModerationServiceServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedModerationServiceServer) UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (UnimplementedModerationServiceServer) BanUserInCommunity(context.Context, *BanUserInCommunityRequest) (*BanUserInCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUserInCommunity not implemented")
}
func (UnimplementedModerationServiceServer) UnbanUserInCommunity(context.Context, *UnbanUserInCommunityRequest) (*UnbanUserInCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUserInCommunity not implemented")
}
func (UnimplementedModerationServiceServer) MuteUserInCommunity(context.Context, *MuteUserInCommunityRequest) (*MuteUserInCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteUserInCommunity not implemented")
}
func (UnimplementedModerationServiceServer) UnmuteUserInCommunity(context.Context, *UnmuteUserInCommunityRequest) (*UnmuteUserInCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteUserInCommunity not implemented")
}
func (UnimplementedModerationServiceServer) ListModerationLogs(context.Context, *ListModerationLogsRequest) (*ListModerationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModerationLogs not implemented")
}
func (UnimplementedModerationServiceServer) mustEmbedUnimplementedModerationServiceServer() {}
func (UnimplementedModerationServiceServer) testEmbeddedByValue()                           {}

// UnsafeModerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModerationServiceServer will
// result in compilation errors.
type UnsafeModerationServiceServer interface {
	mustEmbedUnimplementedModerationServiceServer()
}

func RegisterModerationServiceServer(s grpc.ServiceRegistrar, srv ModerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedModerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModerationService_ServiceDesc, srv)
}

func _ModerationService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_UnbanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).UnbanUser(ctx, req.(*UnbanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_BanUserInCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserInCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).BanUserInCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_BanUserInCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).BanUserInCommunity(ctx, req.(*BanUserInCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_UnbanUserInCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserInCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).UnbanUserInCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_UnbanUserInCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).UnbanUserInCommunity(ctx, req.(*UnbanUserInCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_MuteUserInCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteUserInCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).MuteUserInCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_MuteUserInCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).MuteUserInCommunity(ctx, req.(*MuteUserInCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_UnmuteUserInCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmuteUserInCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).UnmuteUserInCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_UnmuteUserInCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).UnmuteUserInCommunity(ctx, req.(*UnmuteUserInCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModerationService_ListModerationLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModerationLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModerationServiceServer).ListModerationLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModerationService_ListModerationLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModerationServiceServer).ListModerationLogs(ctx, req.(*ListModerationLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModerationService_ServiceDesc is the grpc.ServiceDesc for ModerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ModerationService",
	HandlerType: (*ModerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BanUser",
			Handler:    _ModerationService_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _ModerationService_UnbanUser_Handler,
		},
		{
			MethodName: "BanUserInCommunity",
			Handler:    _ModerationService_BanUserInCommunity_Handler,
		},
		{
			MethodName: "UnbanUserInCommunity",
			Handler:    _ModerationService_UnbanUserInCommunity_Handler,
		},
		{
			MethodName: "MuteUserInCommunity",
			Handler:    _ModerationService_MuteUserInCommunity_Handler,
		},
		{
			MethodName: "UnmuteUserInCommunity",
			Handler:    _ModerationService_UnmuteUserInCommunity_Handler,
		},
		{
			MethodName: "ListModerationLogs",
			Handler:    _ModerationService_ListModerationLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moderation.proto",
}
