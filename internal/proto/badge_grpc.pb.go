// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: badge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BadgeService_CreatePlatformBadge_FullMethodName      = "/proto.BadgeService/CreatePlatformBadge"
	BadgeService_CreateCommunityBadge_FullMethodName     = "/proto.BadgeService/CreateCommunityBadge"
	BadgeService_GetBadge_FullMethodName                 = "/proto.BadgeService/GetBadge"
	BadgeService_UpdateBadge_FullMethodName              = "/proto.BadgeService/UpdateBadge"
	BadgeService_DeleteBadge_FullMethodName              = "/proto.BadgeService/DeleteBadge"
	BadgeService_ApproveCommunityBadge_FullMethodName    = "/proto.BadgeService/ApproveCommunityBadge"
	BadgeService_RejectCommunityBadge_FullMethodName     = "/proto.BadgeService/RejectCommunityBadge"
	BadgeService_AwardBadgeToUser_FullMethodName         = "/proto.BadgeService/AwardBadgeToUser"
	BadgeService_AwardBadgeToCommunity_FullMethodName    = "/proto.BadgeService/AwardBadgeToCommunity"
	BadgeService_RevokeBadgeFromUser_FullMethodName      = "/proto.BadgeService/RevokeBadgeFromUser"
	BadgeService_RevokeBadgeFromCommunity_FullMethodName = "/proto.BadgeService/RevokeBadgeFromCommunity"
	BadgeService_ListUserBadges_FullMethodName           = "/proto.BadgeService/ListUserBadges"
	BadgeService_ListCommunityBadges_FullMethodName      = "/proto.BadgeService/ListCommunityBadges"
	BadgeService_ListPendingBadges_FullMethodName        = "/proto.BadgeService/ListPendingBadges"
)

// BadgeServiceClient is the client API for BadgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BadgeServiceClient interface {
	// Badge Management
	CreatePlatformBadge(ctx context.Context, in *CreatePlatformBadgeRequest, opts ...grpc.CallOption) (*CreatePlatformBadgeResponse, error)
	CreateCommunityBadge(ctx context.Context, in *CreateCommunityBadgeRequest, opts ...grpc.CallOption) (*CreateCommunityBadgeResponse, error)
	GetBadge(ctx context.Context, in *GetBadgeRequest, opts ...grpc.CallOption) (*GetBadgeResponse, error)
	UpdateBadge(ctx context.Context, in *UpdateBadgeRequest, opts ...grpc.CallOption) (*UpdateBadgeResponse, error)
	DeleteBadge(ctx context.Context, in *DeleteBadgeRequest, opts ...grpc.CallOption) (*DeleteBadgeResponse, error)
	// Badge Moderation (Community Badges)
	ApproveCommunityBadge(ctx context.Context, in *ApproveCommunityBadgeRequest, opts ...grpc.CallOption) (*ApproveCommunityBadgeResponse, error)
	RejectCommunityBadge(ctx context.Context, in *RejectCommunityBadgeRequest, opts ...grpc.CallOption) (*RejectCommunityBadgeResponse, error)
	// Badge Awards
	AwardBadgeToUser(ctx context.Context, in *AwardBadgeToUserRequest, opts ...grpc.CallOption) (*AwardBadgeToUserResponse, error)
	AwardBadgeToCommunity(ctx context.Context, in *AwardBadgeToCommunityRequest, opts ...grpc.CallOption) (*AwardBadgeToCommunityResponse, error)
	RevokeBadgeFromUser(ctx context.Context, in *RevokeBadgeFromUserRequest, opts ...grpc.CallOption) (*RevokeBadgeFromUserResponse, error)
	RevokeBadgeFromCommunity(ctx context.Context, in *RevokeBadgeFromCommunityRequest, opts ...grpc.CallOption) (*RevokeBadgeFromCommunityResponse, error)
	// Badge Listings
	ListUserBadges(ctx context.Context, in *ListUserBadgesRequest, opts ...grpc.CallOption) (*ListUserBadgesResponse, error)
	ListCommunityBadges(ctx context.Context, in *ListCommunityBadgesRequest, opts ...grpc.CallOption) (*ListCommunityBadgesResponse, error)
	ListPendingBadges(ctx context.Context, in *ListPendingBadgesRequest, opts ...grpc.CallOption) (*ListPendingBadgesResponse, error)
}

type badgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBadgeServiceClient(cc grpc.ClientConnInterface) BadgeServiceClient {
	return &badgeServiceClient{cc}
}

func (c *badgeServiceClient) CreatePlatformBadge(ctx context.Context, in *CreatePlatformBadgeRequest, opts ...grpc.CallOption) (*CreatePlatformBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlatformBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_CreatePlatformBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) CreateCommunityBadge(ctx context.Context, in *CreateCommunityBadgeRequest, opts ...grpc.CallOption) (*CreateCommunityBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommunityBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_CreateCommunityBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) GetBadge(ctx context.Context, in *GetBadgeRequest, opts ...grpc.CallOption) (*GetBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_GetBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) UpdateBadge(ctx context.Context, in *UpdateBadgeRequest, opts ...grpc.CallOption) (*UpdateBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_UpdateBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) DeleteBadge(ctx context.Context, in *DeleteBadgeRequest, opts ...grpc.CallOption) (*DeleteBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_DeleteBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) ApproveCommunityBadge(ctx context.Context, in *ApproveCommunityBadgeRequest, opts ...grpc.CallOption) (*ApproveCommunityBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveCommunityBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_ApproveCommunityBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) RejectCommunityBadge(ctx context.Context, in *RejectCommunityBadgeRequest, opts ...grpc.CallOption) (*RejectCommunityBadgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectCommunityBadgeResponse)
	err := c.cc.Invoke(ctx, BadgeService_RejectCommunityBadge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) AwardBadgeToUser(ctx context.Context, in *AwardBadgeToUserRequest, opts ...grpc.CallOption) (*AwardBadgeToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AwardBadgeToUserResponse)
	err := c.cc.Invoke(ctx, BadgeService_AwardBadgeToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) AwardBadgeToCommunity(ctx context.Context, in *AwardBadgeToCommunityRequest, opts ...grpc.CallOption) (*AwardBadgeToCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AwardBadgeToCommunityResponse)
	err := c.cc.Invoke(ctx, BadgeService_AwardBadgeToCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) RevokeBadgeFromUser(ctx context.Context, in *RevokeBadgeFromUserRequest, opts ...grpc.CallOption) (*RevokeBadgeFromUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeBadgeFromUserResponse)
	err := c.cc.Invoke(ctx, BadgeService_RevokeBadgeFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) RevokeBadgeFromCommunity(ctx context.Context, in *RevokeBadgeFromCommunityRequest, opts ...grpc.CallOption) (*RevokeBadgeFromCommunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeBadgeFromCommunityResponse)
	err := c.cc.Invoke(ctx, BadgeService_RevokeBadgeFromCommunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) ListUserBadges(ctx context.Context, in *ListUserBadgesRequest, opts ...grpc.CallOption) (*ListUserBadgesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBadgesResponse)
	err := c.cc.Invoke(ctx, BadgeService_ListUserBadges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) ListCommunityBadges(ctx context.Context, in *ListCommunityBadgesRequest, opts ...grpc.CallOption) (*ListCommunityBadgesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommunityBadgesResponse)
	err := c.cc.Invoke(ctx, BadgeService_ListCommunityBadges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *badgeServiceClient) ListPendingBadges(ctx context.Context, in *ListPendingBadgesRequest, opts ...grpc.CallOption) (*ListPendingBadgesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPendingBadgesResponse)
	err := c.cc.Invoke(ctx, BadgeService_ListPendingBadges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BadgeServiceServer is the server API for BadgeService service.
// All implementations must embed UnimplementedBadgeServiceServer
// for forward compatibility.
type BadgeServiceServer interface {
	// Badge Management
	CreatePlatformBadge(context.Context, *CreatePlatformBadgeRequest) (*CreatePlatformBadgeResponse, error)
	CreateCommunityBadge(context.Context, *CreateCommunityBadgeRequest) (*CreateCommunityBadgeResponse, error)
	GetBadge(context.Context, *GetBadgeRequest) (*GetBadgeResponse, error)
	UpdateBadge(context.Context, *UpdateBadgeRequest) (*UpdateBadgeResponse, error)
	DeleteBadge(context.Context, *DeleteBadgeRequest) (*DeleteBadgeResponse, error)
	// Badge Moderation (Community Badges)
	ApproveCommunityBadge(context.Context, *ApproveCommunityBadgeRequest) (*ApproveCommunityBadgeResponse, error)
	RejectCommunityBadge(context.Context, *RejectCommunityBadgeRequest) (*RejectCommunityBadgeResponse, error)
	// Badge Awards
	AwardBadgeToUser(context.Context, *AwardBadgeToUserRequest) (*AwardBadgeToUserResponse, error)
	AwardBadgeToCommunity(context.Context, *AwardBadgeToCommunityRequest) (*AwardBadgeToCommunityResponse, error)
	RevokeBadgeFromUser(context.Context, *RevokeBadgeFromUserRequest) (*RevokeBadgeFromUserResponse, error)
	RevokeBadgeFromCommunity(context.Context, *RevokeBadgeFromCommunityRequest) (*RevokeBadgeFromCommunityResponse, error)
	// Badge Listings
	ListUserBadges(context.Context, *ListUserBadgesRequest) (*ListUserBadgesResponse, error)
	ListCommunityBadges(context.Context, *ListCommunityBadgesRequest) (*ListCommunityBadgesResponse, error)
	ListPendingBadges(context.Context, *ListPendingBadgesRequest) (*ListPendingBadgesResponse, error)
	mustEmbedUnimplementedBadgeServiceServer()
}

// UnimplementedBadgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBadgeServiceServer struct{}

func (UnimplementedBadgeServiceServer) CreatePlatformBadge(context.Context, *CreatePlatformBadgeRequest) (*CreatePlatformBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformBadge not implemented")
}
func (UnimplementedBadgeServiceServer) CreateCommunityBadge(context.Context, *CreateCommunityBadgeRequest) (*CreateCommunityBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunityBadge not implemented")
}
func (UnimplementedBadgeServiceServer) GetBadge(context.Context, *GetBadgeRequest) (*GetBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBadge not implemented")
}
func (UnimplementedBadgeServiceServer) UpdateBadge(context.Context, *UpdateBadgeRequest) (*UpdateBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBadge not implemented")
}
func (UnimplementedBadgeServiceServer) DeleteBadge(context.Context, *DeleteBadgeRequest) (*DeleteBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBadge not implemented")
}
func (UnimplementedBadgeServiceServer) ApproveCommunityBadge(context.Context, *ApproveCommunityBadgeRequest) (*ApproveCommunityBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCommunityBadge not implemented")
}
func (UnimplementedBadgeServiceServer) RejectCommunityBadge(context.Context, *RejectCommunityBadgeRequest) (*RejectCommunityBadgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectCommunityBadge not implemented")
}
func (UnimplementedBadgeServiceServer) AwardBadgeToUser(context.Context, *AwardBadgeToUserRequest) (*AwardBadgeToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardBadgeToUser not implemented")
}
func (UnimplementedBadgeServiceServer) AwardBadgeToCommunity(context.Context, *AwardBadgeToCommunityRequest) (*AwardBadgeToCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardBadgeToCommunity not implemented")
}
func (UnimplementedBadgeServiceServer) RevokeBadgeFromUser(context.Context, *RevokeBadgeFromUserRequest) (*RevokeBadgeFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBadgeFromUser not implemented")
}
func (UnimplementedBadgeServiceServer) RevokeBadgeFromCommunity(context.Context, *RevokeBadgeFromCommunityRequest) (*RevokeBadgeFromCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeBadgeFromCommunity not implemented")
}
func (UnimplementedBadgeServiceServer) ListUserBadges(context.Context, *ListUserBadgesRequest) (*ListUserBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBadges not implemented")
}
func (UnimplementedBadgeServiceServer) ListCommunityBadges(context.Context, *ListCommunityBadgesRequest) (*ListCommunityBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunityBadges not implemented")
}
func (UnimplementedBadgeServiceServer) ListPendingBadges(context.Context, *ListPendingBadgesRequest) (*ListPendingBadgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingBadges not implemented")
}
func (UnimplementedBadgeServiceServer) mustEmbedUnimplementedBadgeServiceServer() {}
func (UnimplementedBadgeServiceServer) testEmbeddedByValue()                      {}

// UnsafeBadgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BadgeServiceServer will
// result in compilation errors.
type UnsafeBadgeServiceServer interface {
	mustEmbedUnimplementedBadgeServiceServer()
}

func RegisterBadgeServiceServer(s grpc.ServiceRegistrar, srv BadgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedBadgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BadgeService_ServiceDesc, srv)
}

func _BadgeService_CreatePlatformBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).CreatePlatformBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_CreatePlatformBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).CreatePlatformBadge(ctx, req.(*CreatePlatformBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_CreateCommunityBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).CreateCommunityBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_CreateCommunityBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).CreateCommunityBadge(ctx, req.(*CreateCommunityBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_GetBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).GetBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_GetBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).GetBadge(ctx, req.(*GetBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_UpdateBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).UpdateBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_UpdateBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).UpdateBadge(ctx, req.(*UpdateBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_DeleteBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).DeleteBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_DeleteBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).DeleteBadge(ctx, req.(*DeleteBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_ApproveCommunityBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveCommunityBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).ApproveCommunityBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_ApproveCommunityBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).ApproveCommunityBadge(ctx, req.(*ApproveCommunityBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_RejectCommunityBadge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectCommunityBadgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).RejectCommunityBadge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_RejectCommunityBadge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).RejectCommunityBadge(ctx, req.(*RejectCommunityBadgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_AwardBadgeToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardBadgeToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).AwardBadgeToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_AwardBadgeToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).AwardBadgeToUser(ctx, req.(*AwardBadgeToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_AwardBadgeToCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardBadgeToCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).AwardBadgeToCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_AwardBadgeToCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).AwardBadgeToCommunity(ctx, req.(*AwardBadgeToCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_RevokeBadgeFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeBadgeFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).RevokeBadgeFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_RevokeBadgeFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).RevokeBadgeFromUser(ctx, req.(*RevokeBadgeFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_RevokeBadgeFromCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeBadgeFromCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).RevokeBadgeFromCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_RevokeBadgeFromCommunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).RevokeBadgeFromCommunity(ctx, req.(*RevokeBadgeFromCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_ListUserBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).ListUserBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_ListUserBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).ListUserBadges(ctx, req.(*ListUserBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_ListCommunityBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommunityBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).ListCommunityBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_ListCommunityBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).ListCommunityBadges(ctx, req.(*ListCommunityBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BadgeService_ListPendingBadges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingBadgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BadgeServiceServer).ListPendingBadges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BadgeService_ListPendingBadges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BadgeServiceServer).ListPendingBadges(ctx, req.(*ListPendingBadgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BadgeService_ServiceDesc is the grpc.ServiceDesc for BadgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BadgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BadgeService",
	HandlerType: (*BadgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlatformBadge",
			Handler:    _BadgeService_CreatePlatformBadge_Handler,
		},
		{
			MethodName: "CreateCommunityBadge",
			Handler:    _BadgeService_CreateCommunityBadge_Handler,
		},
		{
			MethodName: "GetBadge",
			Handler:    _BadgeService_GetBadge_Handler,
		},
		{
			MethodName: "UpdateBadge",
			Handler:    _BadgeService_UpdateBadge_Handler,
		},
		{
			MethodName: "DeleteBadge",
			Handler:    _BadgeService_DeleteBadge_Handler,
		},
		{
			MethodName: "ApproveCommunityBadge",
			Handler:    _BadgeService_ApproveCommunityBadge_Handler,
		},
		{
			MethodName: "RejectCommunityBadge",
			Handler:    _BadgeService_RejectCommunityBadge_Handler,
		},
		{
			MethodName: "AwardBadgeToUser",
			Handler:    _BadgeService_AwardBadgeToUser_Handler,
		},
		{
			MethodName: "AwardBadgeToCommunity",
			Handler:    _BadgeService_AwardBadgeToCommunity_Handler,
		},
		{
			MethodName: "RevokeBadgeFromUser",
			Handler:    _BadgeService_RevokeBadgeFromUser_Handler,
		},
		{
			MethodName: "RevokeBadgeFromCommunity",
			Handler:    _BadgeService_RevokeBadgeFromCommunity_Handler,
		},
		{
			MethodName: "ListUserBadges",
			Handler:    _BadgeService_ListUserBadges_Handler,
		},
		{
			MethodName: "ListCommunityBadges",
			Handler:    _BadgeService_ListCommunityBadges_Handler,
		},
		{
			MethodName: "ListPendingBadges",
			Handler:    _BadgeService_ListPendingBadges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "badge.proto",
}
