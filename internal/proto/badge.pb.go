// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.1
// source: badge.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RarityLevel int32

const (
	RarityLevel_RARITY_LEVEL_UNSPECIFIED RarityLevel = 0
	RarityLevel_COMMON                   RarityLevel = 1
	RarityLevel_RARE                     RarityLevel = 2
	RarityLevel_EPIC                     RarityLevel = 3
	RarityLevel_LEGENDARY                RarityLevel = 4
)

// Enum value maps for RarityLevel.
var (
	RarityLevel_name = map[int32]string{
		0: "RARITY_LEVEL_UNSPECIFIED",
		1: "COMMON",
		2: "RARE",
		3: "EPIC",
		4: "LEGENDARY",
	}
	RarityLevel_value = map[string]int32{
		"RARITY_LEVEL_UNSPECIFIED": 0,
		"COMMON":                   1,
		"RARE":                     2,
		"EPIC":                     3,
		"LEGENDARY":                4,
	}
)

func (x RarityLevel) Enum() *RarityLevel {
	p := new(RarityLevel)
	*p = x
	return p
}

func (x RarityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RarityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_badge_proto_enumTypes[0].Descriptor()
}

func (RarityLevel) Type() protoreflect.EnumType {
	return &file_badge_proto_enumTypes[0]
}

func (x RarityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RarityLevel.Descriptor instead.
func (RarityLevel) EnumDescriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{0}
}

type BadgeType int32

const (
	BadgeType_BADGE_TYPE_UNSPECIFIED BadgeType = 0
	BadgeType_PLATFORM               BadgeType = 1
	BadgeType_COMMUNITY              BadgeType = 2
)

// Enum value maps for BadgeType.
var (
	BadgeType_name = map[int32]string{
		0: "BADGE_TYPE_UNSPECIFIED",
		1: "PLATFORM",
		2: "COMMUNITY",
	}
	BadgeType_value = map[string]int32{
		"BADGE_TYPE_UNSPECIFIED": 0,
		"PLATFORM":               1,
		"COMMUNITY":              2,
	}
)

func (x BadgeType) Enum() *BadgeType {
	p := new(BadgeType)
	*p = x
	return p
}

func (x BadgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_badge_proto_enumTypes[1].Descriptor()
}

func (BadgeType) Type() protoreflect.EnumType {
	return &file_badge_proto_enumTypes[1]
}

func (x BadgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeType.Descriptor instead.
func (BadgeType) EnumDescriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{1}
}

type BadgeStatus int32

const (
	BadgeStatus_BADGE_STATUS_UNSPECIFIED BadgeStatus = 0
	BadgeStatus_ACTIVE                   BadgeStatus = 1
	BadgeStatus_PENDING_APPROVAL         BadgeStatus = 2
	BadgeStatus_REJECTED                 BadgeStatus = 3
)

// Enum value maps for BadgeStatus.
var (
	BadgeStatus_name = map[int32]string{
		0: "BADGE_STATUS_UNSPECIFIED",
		1: "ACTIVE",
		2: "PENDING_APPROVAL",
		3: "REJECTED",
	}
	BadgeStatus_value = map[string]int32{
		"BADGE_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                   1,
		"PENDING_APPROVAL":         2,
		"REJECTED":                 3,
	}
)

func (x BadgeStatus) Enum() *BadgeStatus {
	p := new(BadgeStatus)
	*p = x
	return p
}

func (x BadgeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_badge_proto_enumTypes[2].Descriptor()
}

func (BadgeStatus) Type() protoreflect.EnumType {
	return &file_badge_proto_enumTypes[2]
}

func (x BadgeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeStatus.Descriptor instead.
func (BadgeStatus) EnumDescriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{2}
}

type RecipientType int32

const (
	RecipientType_RECIPIENT_TYPE_UNSPECIFIED RecipientType = 0
	RecipientType_RECIPIENT_TYPE_USER        RecipientType = 1
	RecipientType_RECIPIENT_TYPE_COMMUNITY   RecipientType = 2
)

// Enum value maps for RecipientType.
var (
	RecipientType_name = map[int32]string{
		0: "RECIPIENT_TYPE_UNSPECIFIED",
		1: "RECIPIENT_TYPE_USER",
		2: "RECIPIENT_TYPE_COMMUNITY",
	}
	RecipientType_value = map[string]int32{
		"RECIPIENT_TYPE_UNSPECIFIED": 0,
		"RECIPIENT_TYPE_USER":        1,
		"RECIPIENT_TYPE_COMMUNITY":   2,
	}
)

func (x RecipientType) Enum() *RecipientType {
	p := new(RecipientType)
	*p = x
	return p
}

func (x RecipientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipientType) Descriptor() protoreflect.EnumDescriptor {
	return file_badge_proto_enumTypes[3].Descriptor()
}

func (RecipientType) Type() protoreflect.EnumType {
	return &file_badge_proto_enumTypes[3]
}

func (x RecipientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipientType.Descriptor instead.
func (RecipientType) EnumDescriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{3}
}

type Badge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IconUrl       string                 `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Rarity        RarityLevel            `protobuf:"varint,5,opt,name=rarity,proto3,enum=proto.RarityLevel" json:"rarity,omitempty"`
	Type          BadgeType              `protobuf:"varint,6,opt,name=type,proto3,enum=proto.BadgeType" json:"type,omitempty"`
	Status        BadgeStatus            `protobuf:"varint,7,opt,name=status,proto3,enum=proto.BadgeStatus" json:"status,omitempty"`
	CommunityId   *string                `protobuf:"bytes,8,opt,name=community_id,json=communityId,proto3,oneof" json:"community_id,omitempty"` // only for community badges
	CreatedBy     string                 `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsAutomatic   bool                   `protobuf:"varint,12,opt,name=is_automatic,json=isAutomatic,proto3" json:"is_automatic,omitempty"` // FR-529: automatic platform badges
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Badge) Reset() {
	*x = Badge{}
	mi := &file_badge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Badge) ProtoMessage() {}

func (x *Badge) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Badge.ProtoReflect.Descriptor instead.
func (*Badge) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{0}
}

func (x *Badge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Badge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Badge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Badge) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *Badge) GetRarity() RarityLevel {
	if x != nil {
		return x.Rarity
	}
	return RarityLevel_RARITY_LEVEL_UNSPECIFIED
}

func (x *Badge) GetType() BadgeType {
	if x != nil {
		return x.Type
	}
	return BadgeType_BADGE_TYPE_UNSPECIFIED
}

func (x *Badge) GetStatus() BadgeStatus {
	if x != nil {
		return x.Status
	}
	return BadgeStatus_BADGE_STATUS_UNSPECIFIED
}

func (x *Badge) GetCommunityId() string {
	if x != nil && x.CommunityId != nil {
		return *x.CommunityId
	}
	return ""
}

func (x *Badge) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Badge) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Badge) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Badge) GetIsAutomatic() bool {
	if x != nil {
		return x.IsAutomatic
	}
	return false
}

type BadgeAward struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BadgeId                string                 `protobuf:"bytes,2,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	Badge                  *Badge                 `protobuf:"bytes,3,opt,name=badge,proto3" json:"badge,omitempty"`
	RecipientId            string                 `protobuf:"bytes,4,opt,name=recipient_id,json=recipientId,proto3" json:"recipient_id,omitempty"` // user_id or community_id
	RecipientType          RecipientType          `protobuf:"varint,5,opt,name=recipient_type,json=recipientType,proto3,enum=proto.RecipientType" json:"recipient_type,omitempty"`
	AwardedBy              string                 `protobuf:"bytes,6,opt,name=awarded_by,json=awardedBy,proto3" json:"awarded_by,omitempty"`
	AwardedByUsername      string                 `protobuf:"bytes,7,opt,name=awarded_by_username,json=awardedByUsername,proto3" json:"awarded_by_username,omitempty"`
	Reason                 *string                `protobuf:"bytes,8,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	AwardedAt              *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=awarded_at,json=awardedAt,proto3" json:"awarded_at,omitempty"`
	AwardedByCommunityId   *string                `protobuf:"bytes,10,opt,name=awarded_by_community_id,json=awardedByCommunityId,proto3,oneof" json:"awarded_by_community_id,omitempty"`       // FR-498: source community (null = platform)
	AwardedByCommunityName *string                `protobuf:"bytes,11,opt,name=awarded_by_community_name,json=awardedByCommunityName,proto3,oneof" json:"awarded_by_community_name,omitempty"` // FR-498: for UI display
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BadgeAward) Reset() {
	*x = BadgeAward{}
	mi := &file_badge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadgeAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeAward) ProtoMessage() {}

func (x *BadgeAward) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeAward.ProtoReflect.Descriptor instead.
func (*BadgeAward) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{1}
}

func (x *BadgeAward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BadgeAward) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *BadgeAward) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *BadgeAward) GetRecipientId() string {
	if x != nil {
		return x.RecipientId
	}
	return ""
}

func (x *BadgeAward) GetRecipientType() RecipientType {
	if x != nil {
		return x.RecipientType
	}
	return RecipientType_RECIPIENT_TYPE_UNSPECIFIED
}

func (x *BadgeAward) GetAwardedBy() string {
	if x != nil {
		return x.AwardedBy
	}
	return ""
}

func (x *BadgeAward) GetAwardedByUsername() string {
	if x != nil {
		return x.AwardedByUsername
	}
	return ""
}

func (x *BadgeAward) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *BadgeAward) GetAwardedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AwardedAt
	}
	return nil
}

func (x *BadgeAward) GetAwardedByCommunityId() string {
	if x != nil && x.AwardedByCommunityId != nil {
		return *x.AwardedByCommunityId
	}
	return ""
}

func (x *BadgeAward) GetAwardedByCommunityName() string {
	if x != nil && x.AwardedByCommunityName != nil {
		return *x.AwardedByCommunityName
	}
	return ""
}

type CreatePlatformBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`               // 3-100 chars
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 10-500 chars
	IconUrl       string                 `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Rarity        RarityLevel            `protobuf:"varint,4,opt,name=rarity,proto3,enum=proto.RarityLevel" json:"rarity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePlatformBadgeRequest) Reset() {
	*x = CreatePlatformBadgeRequest{}
	mi := &file_badge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlatformBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlatformBadgeRequest) ProtoMessage() {}

func (x *CreatePlatformBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlatformBadgeRequest.ProtoReflect.Descriptor instead.
func (*CreatePlatformBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePlatformBadgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlatformBadgeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlatformBadgeRequest) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CreatePlatformBadgeRequest) GetRarity() RarityLevel {
	if x != nil {
		return x.Rarity
	}
	return RarityLevel_RARITY_LEVEL_UNSPECIFIED
}

type CreatePlatformBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badge         *Badge                 `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePlatformBadgeResponse) Reset() {
	*x = CreatePlatformBadgeResponse{}
	mi := &file_badge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlatformBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlatformBadgeResponse) ProtoMessage() {}

func (x *CreatePlatformBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlatformBadgeResponse.ProtoReflect.Descriptor instead.
func (*CreatePlatformBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePlatformBadgeResponse) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

type CreateCommunityBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommunityId   string                 `protobuf:"bytes,1,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // 3-100 chars
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` // 10-500 chars
	IconUrl       string                 `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Rarity        RarityLevel            `protobuf:"varint,5,opt,name=rarity,proto3,enum=proto.RarityLevel" json:"rarity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommunityBadgeRequest) Reset() {
	*x = CreateCommunityBadgeRequest{}
	mi := &file_badge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommunityBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunityBadgeRequest) ProtoMessage() {}

func (x *CreateCommunityBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunityBadgeRequest.ProtoReflect.Descriptor instead.
func (*CreateCommunityBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCommunityBadgeRequest) GetCommunityId() string {
	if x != nil {
		return x.CommunityId
	}
	return ""
}

func (x *CreateCommunityBadgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCommunityBadgeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCommunityBadgeRequest) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *CreateCommunityBadgeRequest) GetRarity() RarityLevel {
	if x != nil {
		return x.Rarity
	}
	return RarityLevel_RARITY_LEVEL_UNSPECIFIED
}

type CreateCommunityBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badge         *Badge                 `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommunityBadgeResponse) Reset() {
	*x = CreateCommunityBadgeResponse{}
	mi := &file_badge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommunityBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunityBadgeResponse) ProtoMessage() {}

func (x *CreateCommunityBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunityBadgeResponse.ProtoReflect.Descriptor instead.
func (*CreateCommunityBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCommunityBadgeResponse) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

type ApproveCommunityBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveCommunityBadgeRequest) Reset() {
	*x = ApproveCommunityBadgeRequest{}
	mi := &file_badge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveCommunityBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCommunityBadgeRequest) ProtoMessage() {}

func (x *ApproveCommunityBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCommunityBadgeRequest.ProtoReflect.Descriptor instead.
func (*ApproveCommunityBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{6}
}

func (x *ApproveCommunityBadgeRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

type ApproveCommunityBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badge         *Badge                 `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveCommunityBadgeResponse) Reset() {
	*x = ApproveCommunityBadgeResponse{}
	mi := &file_badge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveCommunityBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCommunityBadgeResponse) ProtoMessage() {}

func (x *ApproveCommunityBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCommunityBadgeResponse.ProtoReflect.Descriptor instead.
func (*ApproveCommunityBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{7}
}

func (x *ApproveCommunityBadgeResponse) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

type RejectCommunityBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // mandatory rejection reason
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectCommunityBadgeRequest) Reset() {
	*x = RejectCommunityBadgeRequest{}
	mi := &file_badge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectCommunityBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCommunityBadgeRequest) ProtoMessage() {}

func (x *RejectCommunityBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCommunityBadgeRequest.ProtoReflect.Descriptor instead.
func (*RejectCommunityBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{8}
}

func (x *RejectCommunityBadgeRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *RejectCommunityBadgeRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RejectCommunityBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badge         *Badge                 `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectCommunityBadgeResponse) Reset() {
	*x = RejectCommunityBadgeResponse{}
	mi := &file_badge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectCommunityBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCommunityBadgeResponse) ProtoMessage() {}

func (x *RejectCommunityBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCommunityBadgeResponse.ProtoReflect.Descriptor instead.
func (*RejectCommunityBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{9}
}

func (x *RejectCommunityBadgeResponse) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

type AwardBadgeToUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Reason        *string                `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwardBadgeToUserRequest) Reset() {
	*x = AwardBadgeToUserRequest{}
	mi := &file_badge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwardBadgeToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardBadgeToUserRequest) ProtoMessage() {}

func (x *AwardBadgeToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardBadgeToUserRequest.ProtoReflect.Descriptor instead.
func (*AwardBadgeToUserRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{10}
}

func (x *AwardBadgeToUserRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *AwardBadgeToUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AwardBadgeToUserRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type AwardBadgeToUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Award         *BadgeAward            `protobuf:"bytes,1,opt,name=award,proto3" json:"award,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwardBadgeToUserResponse) Reset() {
	*x = AwardBadgeToUserResponse{}
	mi := &file_badge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwardBadgeToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardBadgeToUserResponse) ProtoMessage() {}

func (x *AwardBadgeToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardBadgeToUserResponse.ProtoReflect.Descriptor instead.
func (*AwardBadgeToUserResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{11}
}

func (x *AwardBadgeToUserResponse) GetAward() *BadgeAward {
	if x != nil {
		return x.Award
	}
	return nil
}

type AwardBadgeToCommunityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	CommunityId   string                 `protobuf:"bytes,2,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	Reason        *string                `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwardBadgeToCommunityRequest) Reset() {
	*x = AwardBadgeToCommunityRequest{}
	mi := &file_badge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwardBadgeToCommunityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardBadgeToCommunityRequest) ProtoMessage() {}

func (x *AwardBadgeToCommunityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardBadgeToCommunityRequest.ProtoReflect.Descriptor instead.
func (*AwardBadgeToCommunityRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{12}
}

func (x *AwardBadgeToCommunityRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *AwardBadgeToCommunityRequest) GetCommunityId() string {
	if x != nil {
		return x.CommunityId
	}
	return ""
}

func (x *AwardBadgeToCommunityRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type AwardBadgeToCommunityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Award         *BadgeAward            `protobuf:"bytes,1,opt,name=award,proto3" json:"award,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwardBadgeToCommunityResponse) Reset() {
	*x = AwardBadgeToCommunityResponse{}
	mi := &file_badge_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwardBadgeToCommunityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardBadgeToCommunityResponse) ProtoMessage() {}

func (x *AwardBadgeToCommunityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardBadgeToCommunityResponse.ProtoReflect.Descriptor instead.
func (*AwardBadgeToCommunityResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{13}
}

func (x *AwardBadgeToCommunityResponse) GetAward() *BadgeAward {
	if x != nil {
		return x.Award
	}
	return nil
}

type RevokeBadgeFromUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Reason        *string                `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeBadgeFromUserRequest) Reset() {
	*x = RevokeBadgeFromUserRequest{}
	mi := &file_badge_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeBadgeFromUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBadgeFromUserRequest) ProtoMessage() {}

func (x *RevokeBadgeFromUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBadgeFromUserRequest.ProtoReflect.Descriptor instead.
func (*RevokeBadgeFromUserRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{14}
}

func (x *RevokeBadgeFromUserRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *RevokeBadgeFromUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RevokeBadgeFromUserRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type RevokeBadgeFromUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeBadgeFromUserResponse) Reset() {
	*x = RevokeBadgeFromUserResponse{}
	mi := &file_badge_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeBadgeFromUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBadgeFromUserResponse) ProtoMessage() {}

func (x *RevokeBadgeFromUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBadgeFromUserResponse.ProtoReflect.Descriptor instead.
func (*RevokeBadgeFromUserResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{15}
}

func (x *RevokeBadgeFromUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RevokeBadgeFromCommunityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	CommunityId   string                 `protobuf:"bytes,2,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	Reason        *string                `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeBadgeFromCommunityRequest) Reset() {
	*x = RevokeBadgeFromCommunityRequest{}
	mi := &file_badge_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeBadgeFromCommunityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBadgeFromCommunityRequest) ProtoMessage() {}

func (x *RevokeBadgeFromCommunityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBadgeFromCommunityRequest.ProtoReflect.Descriptor instead.
func (*RevokeBadgeFromCommunityRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{16}
}

func (x *RevokeBadgeFromCommunityRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *RevokeBadgeFromCommunityRequest) GetCommunityId() string {
	if x != nil {
		return x.CommunityId
	}
	return ""
}

func (x *RevokeBadgeFromCommunityRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type RevokeBadgeFromCommunityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeBadgeFromCommunityResponse) Reset() {
	*x = RevokeBadgeFromCommunityResponse{}
	mi := &file_badge_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeBadgeFromCommunityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBadgeFromCommunityResponse) ProtoMessage() {}

func (x *RevokeBadgeFromCommunityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBadgeFromCommunityResponse.ProtoReflect.Descriptor instead.
func (*RevokeBadgeFromCommunityResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{17}
}

func (x *RevokeBadgeFromCommunityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListUserBadgesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Cursor        string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserBadgesRequest) Reset() {
	*x = ListUserBadgesRequest{}
	mi := &file_badge_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserBadgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserBadgesRequest) ProtoMessage() {}

func (x *ListUserBadgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserBadgesRequest.ProtoReflect.Descriptor instead.
func (*ListUserBadgesRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{18}
}

func (x *ListUserBadgesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserBadgesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListUserBadgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListUserBadgesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Awards        []*BadgeAward          `protobuf:"bytes,1,rep,name=awards,proto3" json:"awards,omitempty"`
	NextCursor    string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserBadgesResponse) Reset() {
	*x = ListUserBadgesResponse{}
	mi := &file_badge_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserBadgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserBadgesResponse) ProtoMessage() {}

func (x *ListUserBadgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserBadgesResponse.ProtoReflect.Descriptor instead.
func (*ListUserBadgesResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{19}
}

func (x *ListUserBadgesResponse) GetAwards() []*BadgeAward {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *ListUserBadgesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListUserBadgesResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ListCommunityBadgesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommunityId   string                 `protobuf:"bytes,1,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	Cursor        string                 `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommunityBadgesRequest) Reset() {
	*x = ListCommunityBadgesRequest{}
	mi := &file_badge_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommunityBadgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommunityBadgesRequest) ProtoMessage() {}

func (x *ListCommunityBadgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommunityBadgesRequest.ProtoReflect.Descriptor instead.
func (*ListCommunityBadgesRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{20}
}

func (x *ListCommunityBadgesRequest) GetCommunityId() string {
	if x != nil {
		return x.CommunityId
	}
	return ""
}

func (x *ListCommunityBadgesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListCommunityBadgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListCommunityBadgesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Awards        []*BadgeAward          `protobuf:"bytes,1,rep,name=awards,proto3" json:"awards,omitempty"`
	NextCursor    string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommunityBadgesResponse) Reset() {
	*x = ListCommunityBadgesResponse{}
	mi := &file_badge_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommunityBadgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommunityBadgesResponse) ProtoMessage() {}

func (x *ListCommunityBadgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommunityBadgesResponse.ProtoReflect.Descriptor instead.
func (*ListCommunityBadgesResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{21}
}

func (x *ListCommunityBadgesResponse) GetAwards() []*BadgeAward {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *ListCommunityBadgesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListCommunityBadgesResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type ListPendingBadgesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cursor        string                 `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPendingBadgesRequest) Reset() {
	*x = ListPendingBadgesRequest{}
	mi := &file_badge_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPendingBadgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPendingBadgesRequest) ProtoMessage() {}

func (x *ListPendingBadgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPendingBadgesRequest.ProtoReflect.Descriptor instead.
func (*ListPendingBadgesRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{22}
}

func (x *ListPendingBadgesRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListPendingBadgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListPendingBadgesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badges        []*Badge               `protobuf:"bytes,1,rep,name=badges,proto3" json:"badges,omitempty"`
	NextCursor    string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPendingBadgesResponse) Reset() {
	*x = ListPendingBadgesResponse{}
	mi := &file_badge_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPendingBadgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPendingBadgesResponse) ProtoMessage() {}

func (x *ListPendingBadgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPendingBadgesResponse.ProtoReflect.Descriptor instead.
func (*ListPendingBadgesResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{23}
}

func (x *ListPendingBadgesResponse) GetBadges() []*Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *ListPendingBadgesResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListPendingBadgesResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type GetBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBadgeRequest) Reset() {
	*x = GetBadgeRequest{}
	mi := &file_badge_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBadgeRequest) ProtoMessage() {}

func (x *GetBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBadgeRequest.ProtoReflect.Descriptor instead.
func (*GetBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{24}
}

func (x *GetBadgeRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

type GetBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badge         *Badge                 `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	AwardedCount  int32                  `protobuf:"varint,2,opt,name=awarded_count,json=awardedCount,proto3" json:"awarded_count,omitempty"` // how many times awarded
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBadgeResponse) Reset() {
	*x = GetBadgeResponse{}
	mi := &file_badge_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBadgeResponse) ProtoMessage() {}

func (x *GetBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBadgeResponse.ProtoReflect.Descriptor instead.
func (*GetBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{25}
}

func (x *GetBadgeResponse) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *GetBadgeResponse) GetAwardedCount() int32 {
	if x != nil {
		return x.AwardedCount
	}
	return 0
}

type UpdateBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IconUrl       *string                `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3,oneof" json:"icon_url,omitempty"`
	Rarity        *RarityLevel           `protobuf:"varint,5,opt,name=rarity,proto3,enum=proto.RarityLevel,oneof" json:"rarity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBadgeRequest) Reset() {
	*x = UpdateBadgeRequest{}
	mi := &file_badge_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBadgeRequest) ProtoMessage() {}

func (x *UpdateBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBadgeRequest.ProtoReflect.Descriptor instead.
func (*UpdateBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateBadgeRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *UpdateBadgeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateBadgeRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateBadgeRequest) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *UpdateBadgeRequest) GetRarity() RarityLevel {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return RarityLevel_RARITY_LEVEL_UNSPECIFIED
}

type UpdateBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Badge         *Badge                 `protobuf:"bytes,1,opt,name=badge,proto3" json:"badge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBadgeResponse) Reset() {
	*x = UpdateBadgeResponse{}
	mi := &file_badge_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBadgeResponse) ProtoMessage() {}

func (x *UpdateBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBadgeResponse.ProtoReflect.Descriptor instead.
func (*UpdateBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateBadgeResponse) GetBadge() *Badge {
	if x != nil {
		return x.Badge
	}
	return nil
}

type DeleteBadgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       string                 `protobuf:"bytes,1,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBadgeRequest) Reset() {
	*x = DeleteBadgeRequest{}
	mi := &file_badge_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBadgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBadgeRequest) ProtoMessage() {}

func (x *DeleteBadgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBadgeRequest.ProtoReflect.Descriptor instead.
func (*DeleteBadgeRequest) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteBadgeRequest) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

type DeleteBadgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBadgeResponse) Reset() {
	*x = DeleteBadgeResponse{}
	mi := &file_badge_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBadgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBadgeResponse) ProtoMessage() {}

func (x *DeleteBadgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_badge_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBadgeResponse.ProtoReflect.Descriptor instead.
func (*DeleteBadgeResponse) Descriptor() ([]byte, []int) {
	return file_badge_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteBadgeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_badge_proto protoreflect.FileDescriptor

const file_badge_proto_rawDesc = "" +
	"\n" +
	"\vbadge.proto\x12\x05proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/api/annotations.proto\"\xd7\x03\n" +
	"\x05Badge\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x19\n" +
	"\bicon_url\x18\x04 \x01(\tR\aiconUrl\x12*\n" +
	"\x06rarity\x18\x05 \x01(\x0e2\x12.proto.RarityLevelR\x06rarity\x12$\n" +
	"\x04type\x18\x06 \x01(\x0e2\x10.proto.BadgeTypeR\x04type\x12*\n" +
	"\x06status\x18\a \x01(\x0e2\x12.proto.BadgeStatusR\x06status\x12&\n" +
	"\fcommunity_id\x18\b \x01(\tH\x00R\vcommunityId\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"created_by\x18\t \x01(\tR\tcreatedBy\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12!\n" +
	"\fis_automatic\x18\f \x01(\bR\visAutomaticB\x0f\n" +
	"\r_community_id\"\xa3\x04\n" +
	"\n" +
	"BadgeAward\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x19\n" +
	"\bbadge_id\x18\x02 \x01(\tR\abadgeId\x12\"\n" +
	"\x05badge\x18\x03 \x01(\v2\f.proto.BadgeR\x05badge\x12!\n" +
	"\frecipient_id\x18\x04 \x01(\tR\vrecipientId\x12;\n" +
	"\x0erecipient_type\x18\x05 \x01(\x0e2\x14.proto.RecipientTypeR\rrecipientType\x12\x1d\n" +
	"\n" +
	"awarded_by\x18\x06 \x01(\tR\tawardedBy\x12.\n" +
	"\x13awarded_by_username\x18\a \x01(\tR\x11awardedByUsername\x12\x1b\n" +
	"\x06reason\x18\b \x01(\tH\x00R\x06reason\x88\x01\x01\x129\n" +
	"\n" +
	"awarded_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tawardedAt\x12:\n" +
	"\x17awarded_by_community_id\x18\n" +
	" \x01(\tH\x01R\x14awardedByCommunityId\x88\x01\x01\x12>\n" +
	"\x19awarded_by_community_name\x18\v \x01(\tH\x02R\x16awardedByCommunityName\x88\x01\x01B\t\n" +
	"\a_reasonB\x1a\n" +
	"\x18_awarded_by_community_idB\x1c\n" +
	"\x1a_awarded_by_community_name\"\x99\x01\n" +
	"\x1aCreatePlatformBadgeRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x19\n" +
	"\bicon_url\x18\x03 \x01(\tR\aiconUrl\x12*\n" +
	"\x06rarity\x18\x04 \x01(\x0e2\x12.proto.RarityLevelR\x06rarity\"A\n" +
	"\x1bCreatePlatformBadgeResponse\x12\"\n" +
	"\x05badge\x18\x01 \x01(\v2\f.proto.BadgeR\x05badge\"\xbd\x01\n" +
	"\x1bCreateCommunityBadgeRequest\x12!\n" +
	"\fcommunity_id\x18\x01 \x01(\tR\vcommunityId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x19\n" +
	"\bicon_url\x18\x04 \x01(\tR\aiconUrl\x12*\n" +
	"\x06rarity\x18\x05 \x01(\x0e2\x12.proto.RarityLevelR\x06rarity\"B\n" +
	"\x1cCreateCommunityBadgeResponse\x12\"\n" +
	"\x05badge\x18\x01 \x01(\v2\f.proto.BadgeR\x05badge\"9\n" +
	"\x1cApproveCommunityBadgeRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\"C\n" +
	"\x1dApproveCommunityBadgeResponse\x12\"\n" +
	"\x05badge\x18\x01 \x01(\v2\f.proto.BadgeR\x05badge\"P\n" +
	"\x1bRejectCommunityBadgeRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"B\n" +
	"\x1cRejectCommunityBadgeResponse\x12\"\n" +
	"\x05badge\x18\x01 \x01(\v2\f.proto.BadgeR\x05badge\"u\n" +
	"\x17AwardBadgeToUserRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1b\n" +
	"\x06reason\x18\x03 \x01(\tH\x00R\x06reason\x88\x01\x01B\t\n" +
	"\a_reason\"C\n" +
	"\x18AwardBadgeToUserResponse\x12'\n" +
	"\x05award\x18\x01 \x01(\v2\x11.proto.BadgeAwardR\x05award\"\x84\x01\n" +
	"\x1cAwardBadgeToCommunityRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\x12!\n" +
	"\fcommunity_id\x18\x02 \x01(\tR\vcommunityId\x12\x1b\n" +
	"\x06reason\x18\x03 \x01(\tH\x00R\x06reason\x88\x01\x01B\t\n" +
	"\a_reason\"H\n" +
	"\x1dAwardBadgeToCommunityResponse\x12'\n" +
	"\x05award\x18\x01 \x01(\v2\x11.proto.BadgeAwardR\x05award\"x\n" +
	"\x1aRevokeBadgeFromUserRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1b\n" +
	"\x06reason\x18\x03 \x01(\tH\x00R\x06reason\x88\x01\x01B\t\n" +
	"\a_reason\"7\n" +
	"\x1bRevokeBadgeFromUserResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\x87\x01\n" +
	"\x1fRevokeBadgeFromCommunityRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\x12!\n" +
	"\fcommunity_id\x18\x02 \x01(\tR\vcommunityId\x12\x1b\n" +
	"\x06reason\x18\x03 \x01(\tH\x00R\x06reason\x88\x01\x01B\t\n" +
	"\a_reason\"<\n" +
	" RevokeBadgeFromCommunityResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"^\n" +
	"\x15ListUserBadgesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"\x7f\n" +
	"\x16ListUserBadgesResponse\x12)\n" +
	"\x06awards\x18\x01 \x03(\v2\x11.proto.BadgeAwardR\x06awards\x12\x1f\n" +
	"\vnext_cursor\x18\x02 \x01(\tR\n" +
	"nextCursor\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"m\n" +
	"\x1aListCommunityBadgesRequest\x12!\n" +
	"\fcommunity_id\x18\x01 \x01(\tR\vcommunityId\x12\x16\n" +
	"\x06cursor\x18\x02 \x01(\tR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"\x84\x01\n" +
	"\x1bListCommunityBadgesResponse\x12)\n" +
	"\x06awards\x18\x01 \x03(\v2\x11.proto.BadgeAwardR\x06awards\x12\x1f\n" +
	"\vnext_cursor\x18\x02 \x01(\tR\n" +
	"nextCursor\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"H\n" +
	"\x18ListPendingBadgesRequest\x12\x16\n" +
	"\x06cursor\x18\x01 \x01(\tR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"}\n" +
	"\x19ListPendingBadgesResponse\x12$\n" +
	"\x06badges\x18\x01 \x03(\v2\f.proto.BadgeR\x06badges\x12\x1f\n" +
	"\vnext_cursor\x18\x02 \x01(\tR\n" +
	"nextCursor\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\",\n" +
	"\x0fGetBadgeRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\"[\n" +
	"\x10GetBadgeResponse\x12\"\n" +
	"\x05badge\x18\x01 \x01(\v2\f.proto.BadgeR\x05badge\x12#\n" +
	"\rawarded_count\x18\x02 \x01(\x05R\fawardedCount\"\xf1\x01\n" +
	"\x12UpdateBadgeRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\x12\x17\n" +
	"\x04name\x18\x02 \x01(\tH\x00R\x04name\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x01R\vdescription\x88\x01\x01\x12\x1e\n" +
	"\bicon_url\x18\x04 \x01(\tH\x02R\aiconUrl\x88\x01\x01\x12/\n" +
	"\x06rarity\x18\x05 \x01(\x0e2\x12.proto.RarityLevelH\x03R\x06rarity\x88\x01\x01B\a\n" +
	"\x05_nameB\x0e\n" +
	"\f_descriptionB\v\n" +
	"\t_icon_urlB\t\n" +
	"\a_rarity\"9\n" +
	"\x13UpdateBadgeResponse\x12\"\n" +
	"\x05badge\x18\x01 \x01(\v2\f.proto.BadgeR\x05badge\"/\n" +
	"\x12DeleteBadgeRequest\x12\x19\n" +
	"\bbadge_id\x18\x01 \x01(\tR\abadgeId\"/\n" +
	"\x13DeleteBadgeResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage*Z\n" +
	"\vRarityLevel\x12\x1c\n" +
	"\x18RARITY_LEVEL_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06COMMON\x10\x01\x12\b\n" +
	"\x04RARE\x10\x02\x12\b\n" +
	"\x04EPIC\x10\x03\x12\r\n" +
	"\tLEGENDARY\x10\x04*D\n" +
	"\tBadgeType\x12\x1a\n" +
	"\x16BADGE_TYPE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bPLATFORM\x10\x01\x12\r\n" +
	"\tCOMMUNITY\x10\x02*[\n" +
	"\vBadgeStatus\x12\x1c\n" +
	"\x18BADGE_STATUS_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\x14\n" +
	"\x10PENDING_APPROVAL\x10\x02\x12\f\n" +
	"\bREJECTED\x10\x03*f\n" +
	"\rRecipientType\x12\x1e\n" +
	"\x1aRECIPIENT_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RECIPIENT_TYPE_USER\x10\x01\x12\x1c\n" +
	"\x18RECIPIENT_TYPE_COMMUNITY\x10\x022\x85\x0e\n" +
	"\fBadgeService\x12y\n" +
	"\x13CreatePlatformBadge\x12!.proto.CreatePlatformBadgeRequest\x1a\".proto.CreatePlatformBadgeResponse\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/badges/platform\x12}\n" +
	"\x14CreateCommunityBadge\x12\".proto.CreateCommunityBadgeRequest\x1a#.proto.CreateCommunityBadgeResponse\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/badges/community\x12W\n" +
	"\bGetBadge\x12\x16.proto.GetBadgeRequest\x1a\x17.proto.GetBadgeResponse\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/badges/{badge_id}\x12c\n" +
	"\vUpdateBadge\x12\x19.proto.UpdateBadgeRequest\x1a\x1a.proto.UpdateBadgeResponse\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*2\x12/badges/{badge_id}\x12`\n" +
	"\vDeleteBadge\x12\x19.proto.DeleteBadgeRequest\x1a\x1a.proto.DeleteBadgeResponse\"\x1a\x82\xd3\xe4\x93\x02\x14*\x12/badges/{badge_id}\x12\x90\x01\n" +
	"\x15ApproveCommunityBadge\x12#.proto.ApproveCommunityBadgeRequest\x1a$.proto.ApproveCommunityBadgeResponse\",\x82\xd3\xe4\x93\x02&\"$/badges/community/{badge_id}/approve\x12\x8f\x01\n" +
	"\x14RejectCommunityBadge\x12\".proto.RejectCommunityBadgeRequest\x1a#.proto.RejectCommunityBadgeResponse\".\x82\xd3\xe4\x93\x02(:\x01*\"#/badges/community/{badge_id}/reject\x12}\n" +
	"\x10AwardBadgeToUser\x12\x1e.proto.AwardBadgeToUserRequest\x1a\x1f.proto.AwardBadgeToUserResponse\"(\x82\xd3\xe4\x93\x02\":\x01*\"\x1d/badges/{badge_id}/award/user\x12\x91\x01\n" +
	"\x15AwardBadgeToCommunity\x12#.proto.AwardBadgeToCommunityRequest\x1a$.proto.AwardBadgeToCommunityResponse\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/badges/{badge_id}/award/community\x12\x8d\x01\n" +
	"\x13RevokeBadgeFromUser\x12!.proto.RevokeBadgeFromUserRequest\x1a\".proto.RevokeBadgeFromUserResponse\"/\x82\xd3\xe4\x93\x02)*'/badges/{badge_id}/award/user/{user_id}\x12\xa6\x01\n" +
	"\x18RevokeBadgeFromCommunity\x12&.proto.RevokeBadgeFromCommunityRequest\x1a'.proto.RevokeBadgeFromCommunityResponse\"9\x82\xd3\xe4\x93\x023*1/badges/{badge_id}/award/community/{community_id}\x12n\n" +
	"\x0eListUserBadges\x12\x1c.proto.ListUserBadgesRequest\x1a\x1d.proto.ListUserBadgesResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\x12\x17/users/{user_id}/badges\x12\x88\x01\n" +
	"\x13ListCommunityBadges\x12!.proto.ListCommunityBadgesRequest\x1a\".proto.ListCommunityBadgesResponse\"*\x82\xd3\xe4\x93\x02$\x12\"/communities/{community_id}/badges\x12o\n" +
	"\x11ListPendingBadges\x12\x1f.proto.ListPendingBadgesRequest\x1a .proto.ListPendingBadgesResponse\"\x17\x82\xd3\xe4\x93\x02\x11\x12\x0f/badges/pendingB\bZ\x06/protob\x06proto3"

var (
	file_badge_proto_rawDescOnce sync.Once
	file_badge_proto_rawDescData []byte
)

func file_badge_proto_rawDescGZIP() []byte {
	file_badge_proto_rawDescOnce.Do(func() {
		file_badge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_badge_proto_rawDesc), len(file_badge_proto_rawDesc)))
	})
	return file_badge_proto_rawDescData
}

var file_badge_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_badge_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_badge_proto_goTypes = []any{
	(RarityLevel)(0),                         // 0: proto.RarityLevel
	(BadgeType)(0),                           // 1: proto.BadgeType
	(BadgeStatus)(0),                         // 2: proto.BadgeStatus
	(RecipientType)(0),                       // 3: proto.RecipientType
	(*Badge)(nil),                            // 4: proto.Badge
	(*BadgeAward)(nil),                       // 5: proto.BadgeAward
	(*CreatePlatformBadgeRequest)(nil),       // 6: proto.CreatePlatformBadgeRequest
	(*CreatePlatformBadgeResponse)(nil),      // 7: proto.CreatePlatformBadgeResponse
	(*CreateCommunityBadgeRequest)(nil),      // 8: proto.CreateCommunityBadgeRequest
	(*CreateCommunityBadgeResponse)(nil),     // 9: proto.CreateCommunityBadgeResponse
	(*ApproveCommunityBadgeRequest)(nil),     // 10: proto.ApproveCommunityBadgeRequest
	(*ApproveCommunityBadgeResponse)(nil),    // 11: proto.ApproveCommunityBadgeResponse
	(*RejectCommunityBadgeRequest)(nil),      // 12: proto.RejectCommunityBadgeRequest
	(*RejectCommunityBadgeResponse)(nil),     // 13: proto.RejectCommunityBadgeResponse
	(*AwardBadgeToUserRequest)(nil),          // 14: proto.AwardBadgeToUserRequest
	(*AwardBadgeToUserResponse)(nil),         // 15: proto.AwardBadgeToUserResponse
	(*AwardBadgeToCommunityRequest)(nil),     // 16: proto.AwardBadgeToCommunityRequest
	(*AwardBadgeToCommunityResponse)(nil),    // 17: proto.AwardBadgeToCommunityResponse
	(*RevokeBadgeFromUserRequest)(nil),       // 18: proto.RevokeBadgeFromUserRequest
	(*RevokeBadgeFromUserResponse)(nil),      // 19: proto.RevokeBadgeFromUserResponse
	(*RevokeBadgeFromCommunityRequest)(nil),  // 20: proto.RevokeBadgeFromCommunityRequest
	(*RevokeBadgeFromCommunityResponse)(nil), // 21: proto.RevokeBadgeFromCommunityResponse
	(*ListUserBadgesRequest)(nil),            // 22: proto.ListUserBadgesRequest
	(*ListUserBadgesResponse)(nil),           // 23: proto.ListUserBadgesResponse
	(*ListCommunityBadgesRequest)(nil),       // 24: proto.ListCommunityBadgesRequest
	(*ListCommunityBadgesResponse)(nil),      // 25: proto.ListCommunityBadgesResponse
	(*ListPendingBadgesRequest)(nil),         // 26: proto.ListPendingBadgesRequest
	(*ListPendingBadgesResponse)(nil),        // 27: proto.ListPendingBadgesResponse
	(*GetBadgeRequest)(nil),                  // 28: proto.GetBadgeRequest
	(*GetBadgeResponse)(nil),                 // 29: proto.GetBadgeResponse
	(*UpdateBadgeRequest)(nil),               // 30: proto.UpdateBadgeRequest
	(*UpdateBadgeResponse)(nil),              // 31: proto.UpdateBadgeResponse
	(*DeleteBadgeRequest)(nil),               // 32: proto.DeleteBadgeRequest
	(*DeleteBadgeResponse)(nil),              // 33: proto.DeleteBadgeResponse
	(*timestamppb.Timestamp)(nil),            // 34: google.protobuf.Timestamp
}
var file_badge_proto_depIdxs = []int32{
	0,  // 0: proto.Badge.rarity:type_name -> proto.RarityLevel
	1,  // 1: proto.Badge.type:type_name -> proto.BadgeType
	2,  // 2: proto.Badge.status:type_name -> proto.BadgeStatus
	34, // 3: proto.Badge.created_at:type_name -> google.protobuf.Timestamp
	34, // 4: proto.Badge.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 5: proto.BadgeAward.badge:type_name -> proto.Badge
	3,  // 6: proto.BadgeAward.recipient_type:type_name -> proto.RecipientType
	34, // 7: proto.BadgeAward.awarded_at:type_name -> google.protobuf.Timestamp
	0,  // 8: proto.CreatePlatformBadgeRequest.rarity:type_name -> proto.RarityLevel
	4,  // 9: proto.CreatePlatformBadgeResponse.badge:type_name -> proto.Badge
	0,  // 10: proto.CreateCommunityBadgeRequest.rarity:type_name -> proto.RarityLevel
	4,  // 11: proto.CreateCommunityBadgeResponse.badge:type_name -> proto.Badge
	4,  // 12: proto.ApproveCommunityBadgeResponse.badge:type_name -> proto.Badge
	4,  // 13: proto.RejectCommunityBadgeResponse.badge:type_name -> proto.Badge
	5,  // 14: proto.AwardBadgeToUserResponse.award:type_name -> proto.BadgeAward
	5,  // 15: proto.AwardBadgeToCommunityResponse.award:type_name -> proto.BadgeAward
	5,  // 16: proto.ListUserBadgesResponse.awards:type_name -> proto.BadgeAward
	5,  // 17: proto.ListCommunityBadgesResponse.awards:type_name -> proto.BadgeAward
	4,  // 18: proto.ListPendingBadgesResponse.badges:type_name -> proto.Badge
	4,  // 19: proto.GetBadgeResponse.badge:type_name -> proto.Badge
	0,  // 20: proto.UpdateBadgeRequest.rarity:type_name -> proto.RarityLevel
	4,  // 21: proto.UpdateBadgeResponse.badge:type_name -> proto.Badge
	6,  // 22: proto.BadgeService.CreatePlatformBadge:input_type -> proto.CreatePlatformBadgeRequest
	8,  // 23: proto.BadgeService.CreateCommunityBadge:input_type -> proto.CreateCommunityBadgeRequest
	28, // 24: proto.BadgeService.GetBadge:input_type -> proto.GetBadgeRequest
	30, // 25: proto.BadgeService.UpdateBadge:input_type -> proto.UpdateBadgeRequest
	32, // 26: proto.BadgeService.DeleteBadge:input_type -> proto.DeleteBadgeRequest
	10, // 27: proto.BadgeService.ApproveCommunityBadge:input_type -> proto.ApproveCommunityBadgeRequest
	12, // 28: proto.BadgeService.RejectCommunityBadge:input_type -> proto.RejectCommunityBadgeRequest
	14, // 29: proto.BadgeService.AwardBadgeToUser:input_type -> proto.AwardBadgeToUserRequest
	16, // 30: proto.BadgeService.AwardBadgeToCommunity:input_type -> proto.AwardBadgeToCommunityRequest
	18, // 31: proto.BadgeService.RevokeBadgeFromUser:input_type -> proto.RevokeBadgeFromUserRequest
	20, // 32: proto.BadgeService.RevokeBadgeFromCommunity:input_type -> proto.RevokeBadgeFromCommunityRequest
	22, // 33: proto.BadgeService.ListUserBadges:input_type -> proto.ListUserBadgesRequest
	24, // 34: proto.BadgeService.ListCommunityBadges:input_type -> proto.ListCommunityBadgesRequest
	26, // 35: proto.BadgeService.ListPendingBadges:input_type -> proto.ListPendingBadgesRequest
	7,  // 36: proto.BadgeService.CreatePlatformBadge:output_type -> proto.CreatePlatformBadgeResponse
	9,  // 37: proto.BadgeService.CreateCommunityBadge:output_type -> proto.CreateCommunityBadgeResponse
	29, // 38: proto.BadgeService.GetBadge:output_type -> proto.GetBadgeResponse
	31, // 39: proto.BadgeService.UpdateBadge:output_type -> proto.UpdateBadgeResponse
	33, // 40: proto.BadgeService.DeleteBadge:output_type -> proto.DeleteBadgeResponse
	11, // 41: proto.BadgeService.ApproveCommunityBadge:output_type -> proto.ApproveCommunityBadgeResponse
	13, // 42: proto.BadgeService.RejectCommunityBadge:output_type -> proto.RejectCommunityBadgeResponse
	15, // 43: proto.BadgeService.AwardBadgeToUser:output_type -> proto.AwardBadgeToUserResponse
	17, // 44: proto.BadgeService.AwardBadgeToCommunity:output_type -> proto.AwardBadgeToCommunityResponse
	19, // 45: proto.BadgeService.RevokeBadgeFromUser:output_type -> proto.RevokeBadgeFromUserResponse
	21, // 46: proto.BadgeService.RevokeBadgeFromCommunity:output_type -> proto.RevokeBadgeFromCommunityResponse
	23, // 47: proto.BadgeService.ListUserBadges:output_type -> proto.ListUserBadgesResponse
	25, // 48: proto.BadgeService.ListCommunityBadges:output_type -> proto.ListCommunityBadgesResponse
	27, // 49: proto.BadgeService.ListPendingBadges:output_type -> proto.ListPendingBadgesResponse
	36, // [36:50] is the sub-list for method output_type
	22, // [22:36] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_badge_proto_init() }
func file_badge_proto_init() {
	if File_badge_proto != nil {
		return
	}
	file_badge_proto_msgTypes[0].OneofWrappers = []any{}
	file_badge_proto_msgTypes[1].OneofWrappers = []any{}
	file_badge_proto_msgTypes[10].OneofWrappers = []any{}
	file_badge_proto_msgTypes[12].OneofWrappers = []any{}
	file_badge_proto_msgTypes[14].OneofWrappers = []any{}
	file_badge_proto_msgTypes[16].OneofWrappers = []any{}
	file_badge_proto_msgTypes[26].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_badge_proto_rawDesc), len(file_badge_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_badge_proto_goTypes,
		DependencyIndexes: file_badge_proto_depIdxs,
		EnumInfos:         file_badge_proto_enumTypes,
		MessageInfos:      file_badge_proto_msgTypes,
	}.Build()
	File_badge_proto = out.File
	file_badge_proto_goTypes = nil
	file_badge_proto_depIdxs = nil
}
