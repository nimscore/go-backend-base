syntax = "proto3";
package proto;
option go_package = "/proto";

import "entity.proto";

import "google/api/annotations.proto";

// ============================================================================
// Create (FR-335-344)
// ============================================================================

message CreateCommentRequest {
  string post_id                    = 1;
  string text                       = 2;  // 1-10000 chars
  optional string parent_comment_id = 3;  // for nested replies
  repeated string attachment_urls   = 4;  // S3 URLs from presigned upload
}

message CreateCommentResponse {
  Comment comment = 1;
}

// ============================================================================
// Get (FR-216, FR-219)
// ============================================================================

message GetCommentRequest {
  string comment_id = 1;
}

message GetCommentResponse {
  Comment comment = 1;
}

// ============================================================================
// Update (FR-384-390)
// ============================================================================

message UpdateCommentRequest {
  string comment_id = 1;
  string text       = 2;
}

message UpdateCommentResponse {
  Comment comment = 1;
}

// ============================================================================
// Delete (FR-030)
// ============================================================================

message DeleteCommentRequest {
  string comment_id = 1;
}

message DeleteCommentResponse {
  string message = 1;
}

// ============================================================================
// Like (FR-173, FR-175, FR-177, FR-178)
// ============================================================================

message LikeCommentRequest {
  string comment_id = 1;
}

message LikeCommentResponse {
  string message       = 1;
  int32 new_like_count = 2;
}

// ============================================================================
// Unlike (FR-174, FR-176)
// ============================================================================

message UnlikeCommentRequest {
  string comment_id = 1;
}

message UnlikeCommentResponse {
  string message       = 1;
  int32 new_like_count = 2;
}

// ============================================================================
// Stream (FR-031-034, FR-081) - gRPC Server-Side Streaming
// ============================================================================

message StreamCommentRequest {
  optional string post_id = 1;  // if empty, stream all platform comments
}

// ============================================================================
// Service Definition
// ============================================================================

service CommentService {
  // CRUD Operations
  rpc Create(CreateCommentRequest) returns (CreateCommentResponse) {
    option (google.api.http) = {
      post: "/comments"
      body: "*"
    };
  }

  rpc Get(GetCommentRequest) returns (GetCommentResponse) {
    option (google.api.http) = {
      get: "/comments/{comment_id}"
    };
  }

  rpc Update(UpdateCommentRequest) returns (UpdateCommentResponse) {
    option (google.api.http) = {
      patch: "/comments/{comment_id}"
      body: "*"
    };
  }

  rpc Delete(DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (google.api.http) = {
      delete: "/comments/{comment_id}"
    };
  }

  // Like Operations
  rpc Like(LikeCommentRequest) returns (LikeCommentResponse) {
    option (google.api.http) = {
      post: "/comments/{comment_id}/like"
    };
  }

  rpc Unlike(UnlikeCommentRequest) returns (UnlikeCommentResponse) {
    option (google.api.http) = {
      delete: "/comments/{comment_id}/like"
    };
  }

  // Real-time Streaming
  rpc Stream(StreamCommentRequest) returns (stream CommentEvent) {
    // No HTTP mapping - gRPC streaming only
  }
}
