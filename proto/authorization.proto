syntax = "proto3";
package proto;
option go_package = "/proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// ============================================================================
// Messages
// ============================================================================

message User {
  string id          = 1;
  string name        = 2;
  string description = 3;
  string email       = 4;
  bool is_verified   = 5;
}

message Session {
  string session_id                    = 1;
  string user_agent                    = 2;
  string ip_address                    = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

// ============================================================================
// ValidateName
// ============================================================================

message ValidateNameRequest {
  string name = 1;
}

message ValidateNameResponse {}

// ============================================================================
// ValidateEmail
// ============================================================================

message ValidateEmailRequest {
  string email = 1;
}

message ValidateEmailResponse {}

// ============================================================================
// Register (FR-280, FR-291, FR-292)
// ============================================================================

message RegisterRequest {
  string name     = 1;
  string email    = 2;
  string password = 3;  // min 12 chars, checked against Have I Been Pwned
}

message RegisterResponse {
  string user_id            = 1;
  map<string, int32> errors = 2;
}

// ============================================================================
// Login (FR-281, FR-293, FR-294)
// ============================================================================

message LoginRequest {
  string email    = 1;
  string password = 2;
}

message LoginResponse {
  User user            = 1;
  string access_token  = 2;  // 15 min expiration
  string refresh_token = 3;  // 7 days expiration
}

// ============================================================================
// Logout (FR-282, FR-302)
// ============================================================================

message LogoutRequest {}

message LogoutResponse {}

// ============================================================================
// RefreshToken (FR-283, FR-295, FR-296)
// ============================================================================

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token  = 1;  // new 15 min token
  string refresh_token = 2;  // new 7 days token
}

// ============================================================================
// VerifyEmail (FR-284)
// ============================================================================

message VerifyEmailRequest {
  string token = 1;
}

message VerifyEmailResponse {}

// ============================================================================
// RequestPasswordReset (FR-285)
// ============================================================================

message RequestPasswordResetRequest {
  string email = 1;
}

message RequestPasswordResetResponse {}

// ============================================================================
// ConfirmResetPassword (FR-286)
// ============================================================================

message ConfirmResetPasswordRequest {
  string token    = 1;
  string password = 2;  // same requirements as registration
}

message ConfirmResetPasswordResponse {}

// ============================================================================
// ChangePassword (FR-287, FR-297, FR-298)
// ============================================================================

message ChangePasswordRequest {
  string old_password = 1;
  string new_password = 2;
}

message ChangePasswordResponse {}

// ============================================================================
// GetCurrentSession (FR-288, FR-299)
// ============================================================================

message GetCurrentSessionRequest {}

message GetCurrentSessionResponse {
  Session session = 1;
}

// ============================================================================
// ListActiveSessions (FR-289, FR-300)
// ============================================================================

message ListActiveSessionsRequest {
  string cursor = 1;
  int32 limit   = 2;
}

message ListActiveSessionsResponse {
  repeated Session sessions = 1;
  string next_cursor        = 2;
  bool has_more             = 3;
}

// ============================================================================
// RevokeSession (FR-290, FR-301)
// ============================================================================

message RevokeSessionRequest {
  string session_id = 1;
}

message RevokeSessionResponse {}

// ============================================================================
// Service Definition
// ============================================================================

service AuthorizationService {
  // Registration and Login
  rpc ValidateName(ValidateNameRequest) returns (ValidateNameResponse) {
    option (google.api.http) = {
      post: "/auth/validate-name"
      body: "*"
    };
  }

  rpc ValidateEmail(ValidateEmailRequest) returns (ValidateEmailResponse) {
    option (google.api.http) = {
      post: "/auth/validate-email"
      body: "*"
    };
  }

  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/auth/register"
      body: "*"
    };
  }

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/auth/login"
      body: "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/auth/logout"
    };
  }

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/auth/refresh"
      body: "*"
    };
  }

  // Email Verification
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/auth/verify-email"
      body: "*"
    };
  }

  // Password Recovery
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse) {
    option (google.api.http) = {
      post: "/auth/password-reset/request"
      body: "*"
    };
  }

  rpc ConfirmPasswordReset(ConfirmResetPasswordRequest) returns (ConfirmResetPasswordResponse) {
    option (google.api.http) = {
      post: "/auth/password-reset/confirm"
      body: "*"
    };
  }

  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/auth/change-password"
      body: "*"
    };
  }

  // Session Management
  rpc GetCurrentSession(GetCurrentSessionRequest) returns (GetCurrentSessionResponse) {
    option (google.api.http) = {
      get: "/auth/session"
    };
  }

  rpc ListActiveSessions(ListActiveSessionsRequest) returns (ListActiveSessionsResponse) {
    option (google.api.http) = {
      get: "/auth/sessions"
    };
  }

  rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse) {
    option (google.api.http) = {
      delete: "/auth/sessions/{session_id}"
    };
  }
}
