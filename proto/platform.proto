syntax = "proto3";
package proto;
option go_package = "/proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// ============================================================================
// Messages
// ============================================================================

// FR-539: Automatic badge setting
message AutomaticBadgeSetting {
  string badge_id = 1;
  bool enabled    = 2;
}

message PlatformSettings {
  string name                                  = 1;
  string description                           = 2;
  string rules                                 = 3;
  string logo_url                              = 4;
  string banner_url                            = 5;
  string auth_banner_url                       = 6;
  string owner_id                              = 7;
  string owner_username                        = 8;
  google.protobuf.Timestamp created_at         = 9;
  repeated AutomaticBadgeSetting badge_settings = 10;  // FR-539: automatic badge enable/disable
}

message PlatformStatistics {
  int32 total_users       = 1;
  int32 verified_users    = 2;
  int32 total_communities = 3;
  int32 total_posts       = 4;
  int32 total_comments    = 5;

  // Report statistics
  int32 pending_reports   = 6;
  int32 resolved_reports  = 7;
  int32 dismissed_reports = 8;

  // Activity statistics
  int32 active_users_24h = 9;
  int32 active_users_7d  = 10;
  int32 active_users_30d = 11;

  google.protobuf.Timestamp calculated_at = 12;
}

// ============================================================================
// GetSettings (FR-315, FR-317-319)
// ============================================================================

message GetSettingsRequest {}

message GetSettingsResponse {
  PlatformSettings settings = 1;
}

// ============================================================================
// UpdateSettings (FR-316, FR-320-323)
// ============================================================================

message UpdateSettingsRequest {
  optional string name                                 = 1;  // 3-100 chars
  optional string description                          = 2;  // max 1000 chars
  optional string rules                                = 3;
  optional string logo_url                             = 4;
  optional string banner_url                           = 5;
  optional string auth_banner_url                      = 6;
  repeated AutomaticBadgeSetting automatic_badge_settings = 7;  // FR-540: update badge enable/disable
}

message UpdateSettingsResponse {
  PlatformSettings settings = 1;
}

// ============================================================================
// GetStatistics (FR-317, FR-324-326)
// ============================================================================

message GetStatisticsRequest {}

message GetStatisticsResponse {
  PlatformStatistics statistics = 1;
}

// ============================================================================
// TransferOwnership (FR-106-108)
// ============================================================================

message TransferOwnershipRequest {
  string new_owner_id = 1;
}

message TransferOwnershipResponse {
  string message = 1;
}

// ============================================================================
// ConfirmOwnership (FR-108)
// ============================================================================

message ConfirmOwnershipRequest {
  string token = 1;
}

message ConfirmOwnershipResponse {
  string message            = 1;
  PlatformSettings settings = 2;
}

// ============================================================================
// Service Definition
// ============================================================================

service PlatformService {
  // Settings Operations
  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {
    option (google.api.http) = {
      get: "/platform/settings"
    };
  }

  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse) {
    option (google.api.http) = {
      patch: "/platform/settings"
      body: "*"
    };
  }

  // Statistics Operations
  rpc GetStatistics(GetStatisticsRequest) returns (GetStatisticsResponse) {
    option (google.api.http) = {
      get: "/platform/statistics"
    };
  }

  // Ownership Operations
  rpc TransferOwnership(TransferOwnershipRequest) returns (TransferOwnershipResponse) {
    option (google.api.http) = {
      post: "/platform/transfer-ownership"
      body: "*"
    };
  }

  rpc ConfirmOwnership(ConfirmOwnershipRequest) returns (ConfirmOwnershipResponse) {
    option (google.api.http) = {
      post: "/platform/confirm-ownership"
      body: "*"
    };
  }
}
