syntax = "proto3";
package proto;
option go_package = "/proto";

import "entity.proto";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";

// ============================================================================
// Create (FR-327-334)
// ============================================================================

message CreateRequest {
  string community_id            = 1;
  string title                   = 2;  // 3-300 chars
  google.protobuf.Struct content = 3;  // JSON
  PostStatus status              = 4;  // draft or published
}

message CreateResponse {
  Post post = 1;
}

// ============================================================================
// Get (FR-208, FR-213)
// ============================================================================

message GetRequest {
  string post_id = 1;
}

message GetResponse {
  Post post = 1;
}

// ============================================================================
// Update (FR-376-383)
// ============================================================================

message UpdateRequest {
  string post_id                          = 1;
  optional string title                   = 2;
  optional google.protobuf.Struct content = 3;
}

message UpdateResponse {
  Post post = 1;
}

// ============================================================================
// Delete (FR-209)
// ============================================================================

message DeleteRequest {
  string post_id = 1;
}

message DeleteResponse {
  string message = 1;
}

// ============================================================================
// ListComments (FR-217, FR-220, FR-221)
// ============================================================================

message ListCommentsRequest {
  string post_id = 1;
  string cursor  = 2;
  int32 limit    = 3;
}

message ListCommentsResponse {
  repeated Comment comments = 1;
  string next_cursor        = 2;
  bool has_more             = 3;
}

// ============================================================================
// Publish (FR-210)
// ============================================================================

message PublishRequest {
  string post_id = 1;
}

message PublishResponse {
  Post post = 1;
}

// ============================================================================
// Unpublish (FR-211)
// ============================================================================

message UnpublishRequest {
  string post_id = 1;
}

message UnpublishResponse {
  Post post = 1;
}

// ============================================================================
// Like (FR-171, FR-175, FR-177, FR-178)
// ============================================================================

message LikeRequest {
  string post_id = 1;
}

message LikeResponse {
  string message       = 1;
  int32 new_like_count = 2;
}

// ============================================================================
// Unlike (FR-172, FR-176)
// ============================================================================

message UnlikeRequest {
  string post_id = 1;
}

message UnlikeResponse {
  string message       = 1;
  int32 new_like_count = 2;
}

// ============================================================================
// CreateBookmark (FR-165, FR-169)
// ============================================================================

message CreateBookmarkRequest {
  string post_id = 1;
}

message CreateBookmarkResponse {
  string message = 1;
}

// ============================================================================
// DeleteBookmark (FR-166)
// ============================================================================

message DeleteBookmarkRequest {
  string post_id = 1;
}

message DeleteBookmarkResponse {
  string message = 1;
}

// ============================================================================
// ListBookmarks (FR-167, FR-168, FR-170)
// ============================================================================

message ListBookmarksRequest {
  string cursor = 1;
  int32 limit   = 2;
}

message ListBookmarksResponse {
  repeated Post posts = 1;
  string next_cursor  = 2;
  bool has_more       = 3;
}

// ============================================================================
// Service Definition
// ============================================================================

service PostService {
  // CRUD Operations
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/posts"
      body: "*"
    };
  }

  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}"
    };
  }

  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/posts/{post_id}"
      body: "*"
    };
  }

  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/posts/{post_id}"
    };
  }

  // List Operations
  rpc ListComments(ListCommentsRequest) returns (ListCommentsResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/comments"
    };
  }

  // Status Management
  rpc Publish(PublishRequest) returns (PublishResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/publish"
    };
  }

  rpc Unpublish(UnpublishRequest) returns (UnpublishResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/unpublish"
    };
  }

  // Like Operations
  rpc Like(LikeRequest) returns (LikeResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/like"
    };
  }

  rpc Unlike(UnlikeRequest) returns (UnlikeResponse) {
    option (google.api.http) = {
      delete: "/posts/{post_id}/like"
    };
  }

  // Bookmark Operations
  rpc CreateBookmark(CreateBookmarkRequest) returns (CreateBookmarkResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/bookmark"
    };
  }

  rpc DeleteBookmark(DeleteBookmarkRequest) returns (DeleteBookmarkResponse) {
    option (google.api.http) = {
      delete: "/posts/{post_id}/bookmark"
    };
  }

  rpc ListBookmarks(ListBookmarksRequest) returns (ListBookmarksResponse) {
    option (google.api.http) = {
      get: "/posts/bookmarks"
    };
  }
}
