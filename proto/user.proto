syntax = "proto3";
package proto;
option go_package = "/proto";

import "entity.proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// ============================================================================
// Get (FR-303, FR-307, FR-313, FR-314)
// ============================================================================

message GetUserRequest {
  string user_id = 1;  // or username
}

message GetUserResponse {
  UserProfile user = 1;
}

// ============================================================================
// GetCurrent (FR-304, FR-308)
// ============================================================================

message GetCurrentUserRequest {}

message GetCurrentUserResponse {
  CurrentUserProfile user = 1;
}

// ============================================================================
// UpdateProfile (FR-305, FR-309, FR-310, FR-311)
// ============================================================================

message UpdateProfileRequest {
  optional string avatar_url  = 1;  // S3 URL from presigned upload
  optional string banner_url  = 2;  // S3 URL from presigned upload
  optional string description = 3;  // max 500 chars
}

message UpdateProfileResponse {
  CurrentUserProfile user = 1;
}

// ============================================================================
// GetStatistics (FR-306, FR-312)
// ============================================================================

message GetUserStatisticsRequest {
  string user_id = 1;
}

message GetUserStatisticsResponse {
  UserStatistics statistics = 1;
}

// ============================================================================
// ListCommunities (FR-227, FR-232)
// ============================================================================

message ListUserCommunitiesRequest {
  string user_id = 1;
  string cursor  = 2;
  int32 limit    = 3;
}

message ListUserCommunitiesResponse {
  repeated Community communities = 1;
  string next_cursor             = 2;
  bool has_more                  = 3;
}

// ============================================================================
// ListPosts (FR-212, FR-214, FR-215)
// ============================================================================

message ListUserPostsRequest {
  string user_id                    = 1;
  optional PostStatus status_filter = 2;  // all, draft, published
  string cursor                     = 3;
  int32 limit                       = 4;
}

message ListUserPostsResponse {
  repeated Post posts = 1;
  string next_cursor  = 2;
  bool has_more       = 3;
}

// ============================================================================
// ListComments (FR-218, FR-222, FR-223)
// ============================================================================

message CommentWithPostInfo {
  Comment comment   = 1;
  string post_id    = 2;
  string post_title = 3;
}

message ListUserCommentsRequest {
  string user_id = 1;
  string cursor  = 2;
  int32 limit    = 3;
}

message ListUserCommentsResponse {
  repeated CommentWithPostInfo comments = 1;
  string next_cursor                    = 2;
  bool has_more                         = 3;
}

// ============================================================================
// Follow (FR-187, FR-191, FR-194, FR-202, FR-203)
// ============================================================================

message FollowRequest {
  string user_id = 1;
}

message FollowResponse {
  string message = 1;
}

// ============================================================================
// Unfollow (FR-188, FR-192, FR-204)
// ============================================================================

message UnfollowRequest {
  string user_id = 1;
}

message UnfollowResponse {
  string message = 1;
}

// ============================================================================
// ListFollowers (FR-189, FR-193)
// ============================================================================

message ListFollowersRequest {
  string user_id = 1;
  string cursor  = 2;
  int32 limit    = 3;
}

message ListFollowersResponse {
  repeated UserProfile users = 1;
  string next_cursor         = 2;
  bool has_more              = 3;
}

// ============================================================================
// ListFollowing (FR-190, FR-193)
// ============================================================================

message ListFollowingRequest {
  string user_id = 1;
  string cursor  = 2;
  int32 limit    = 3;
}

message ListFollowingResponse {
  repeated UserProfile users = 1;
  string next_cursor         = 2;
  bool has_more              = 3;
}

// ============================================================================
// Heartbeat (FR-459, FR-460, FR-461, FR-466)
// ============================================================================

message HeartbeatRequest {
  // empty or optionally device_info
}

message HeartbeatResponse {
  string message                          = 1;
  google.protobuf.Timestamp last_activity = 2;
}

// ============================================================================
// Service Definition
// ============================================================================

service UserService {
  // Profile Operations
  rpc Get(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}"
    };
  }

  rpc GetCurrent(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {
      get: "/users/me"
    };
  }

  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      patch: "/users/me"
      body: "*"
    };
  }

  rpc GetStatistics(GetUserStatisticsRequest) returns (GetUserStatisticsResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}/statistics"
    };
  }

  // List Operations
  rpc ListCommunities(ListUserCommunitiesRequest) returns (ListUserCommunitiesResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}/communities"
    };
  }

  rpc ListPosts(ListUserPostsRequest) returns (ListUserPostsResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}/posts"
    };
  }

  rpc ListComments(ListUserCommentsRequest) returns (ListUserCommentsResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}/comments"
    };
  }

  // Follow Operations
  rpc Follow(FollowRequest) returns (FollowResponse) {
    option (google.api.http) = {
      post: "/users/{user_id}/follow"
    };
  }

  rpc Unfollow(UnfollowRequest) returns (UnfollowResponse) {
    option (google.api.http) = {
      delete: "/users/{user_id}/follow"
    };
  }

  rpc ListFollowers(ListFollowersRequest) returns (ListFollowersResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}/followers"
    };
  }

  rpc ListFollowing(ListFollowingRequest) returns (ListFollowingResponse) {
    option (google.api.http) = {
      get: "/users/{user_id}/following"
    };
  }

  // Online Status
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {
    option (google.api.http) = {
      post: "/users/heartbeat"
    };
  }
}
